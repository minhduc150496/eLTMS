

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "eLTMS.DataAccess\App.config"
//     Connection String Name: "FinalProjectContext"
//     Connection String:      "Data Source=eltms-draft02.ctrl7rl58hq7.ap-southeast-1.rds.amazonaws.com,1433;Initial Catalog=eLTMS-draft02;User ID=sa;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Express Edition (64-bit)
// Database Engine Edition : Express
// Database Version        : 14.0.3035.2

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace eLTMS.DataAccess.template
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        System.Data.Entity.DbSet<Employee> Employees { get; set; } // Employee
        System.Data.Entity.DbSet<ExportPaper> ExportPapers { get; set; } // ExportPaper
        System.Data.Entity.DbSet<ExportProposurePaper> ExportProposurePapers { get; set; } // ExportProposurePaper
        System.Data.Entity.DbSet<ExportProposurePaperDetail> ExportProposurePaperDetails { get; set; } // ExportProposurePaperDetail
        System.Data.Entity.DbSet<Faculty> Faculties { get; set; } // Faculty
        System.Data.Entity.DbSet<Feedback> Feedbacks { get; set; } // Feedback
        System.Data.Entity.DbSet<Hospital> Hospitals { get; set; } // Hospital
        System.Data.Entity.DbSet<HospitalFacultyMapping> HospitalFacultyMappings { get; set; } // HospitalFacultyMapping
        System.Data.Entity.DbSet<HospitalSuggesting> HospitalSuggestings { get; set; } // HospitalSuggesting
        System.Data.Entity.DbSet<ImportPaper> ImportPapers { get; set; } // ImportPaper
        System.Data.Entity.DbSet<ImportPaperDetail> ImportPaperDetails { get; set; } // ImportPaperDetail
        System.Data.Entity.DbSet<LabTest> LabTests { get; set; } // LabTest
        System.Data.Entity.DbSet<LabTestSampleMapping> LabTestSampleMappings { get; set; } // LabTestSampleMapping
        System.Data.Entity.DbSet<Patient> Patients { get; set; } // Patient
        System.Data.Entity.DbSet<ResultIndex> ResultIndexes { get; set; } // ResultIndex
        System.Data.Entity.DbSet<ResultPaper> ResultPapers { get; set; } // ResultPaper
        System.Data.Entity.DbSet<Sample> Samples { get; set; } // Sample
        System.Data.Entity.DbSet<Supply> Supplies { get; set; } // Supply
        System.Data.Entity.DbSet<SupplyType> SupplyTypes { get; set; } // SupplyType
        System.Data.Entity.DbSet<Testing> Testings { get; set; } // Testing
        System.Data.Entity.DbSet<TestProfile> TestProfiles { get; set; } // TestProfile
        System.Data.Entity.DbSet<TestProfileLabTestMapping> TestProfileLabTestMappings { get; set; } // TestProfileLabTestMapping

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        public System.Data.Entity.DbSet<Employee> Employees { get; set; } // Employee
        public System.Data.Entity.DbSet<ExportPaper> ExportPapers { get; set; } // ExportPaper
        public System.Data.Entity.DbSet<ExportProposurePaper> ExportProposurePapers { get; set; } // ExportProposurePaper
        public System.Data.Entity.DbSet<ExportProposurePaperDetail> ExportProposurePaperDetails { get; set; } // ExportProposurePaperDetail
        public System.Data.Entity.DbSet<Faculty> Faculties { get; set; } // Faculty
        public System.Data.Entity.DbSet<Feedback> Feedbacks { get; set; } // Feedback
        public System.Data.Entity.DbSet<Hospital> Hospitals { get; set; } // Hospital
        public System.Data.Entity.DbSet<HospitalFacultyMapping> HospitalFacultyMappings { get; set; } // HospitalFacultyMapping
        public System.Data.Entity.DbSet<HospitalSuggesting> HospitalSuggestings { get; set; } // HospitalSuggesting
        public System.Data.Entity.DbSet<ImportPaper> ImportPapers { get; set; } // ImportPaper
        public System.Data.Entity.DbSet<ImportPaperDetail> ImportPaperDetails { get; set; } // ImportPaperDetail
        public System.Data.Entity.DbSet<LabTest> LabTests { get; set; } // LabTest
        public System.Data.Entity.DbSet<LabTestSampleMapping> LabTestSampleMappings { get; set; } // LabTestSampleMapping
        public System.Data.Entity.DbSet<Patient> Patients { get; set; } // Patient
        public System.Data.Entity.DbSet<ResultIndex> ResultIndexes { get; set; } // ResultIndex
        public System.Data.Entity.DbSet<ResultPaper> ResultPapers { get; set; } // ResultPaper
        public System.Data.Entity.DbSet<Sample> Samples { get; set; } // Sample
        public System.Data.Entity.DbSet<Supply> Supplies { get; set; } // Supply
        public System.Data.Entity.DbSet<SupplyType> SupplyTypes { get; set; } // SupplyType
        public System.Data.Entity.DbSet<Testing> Testings { get; set; } // Testing
        public System.Data.Entity.DbSet<TestProfile> TestProfiles { get; set; } // TestProfile
        public System.Data.Entity.DbSet<TestProfileLabTestMapping> TestProfileLabTestMappings { get; set; } // TestProfileLabTestMapping

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=FinalProjectContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccountConfiguration());
            modelBuilder.Configurations.Add(new EmployeeConfiguration());
            modelBuilder.Configurations.Add(new ExportPaperConfiguration());
            modelBuilder.Configurations.Add(new ExportProposurePaperConfiguration());
            modelBuilder.Configurations.Add(new ExportProposurePaperDetailConfiguration());
            modelBuilder.Configurations.Add(new FacultyConfiguration());
            modelBuilder.Configurations.Add(new FeedbackConfiguration());
            modelBuilder.Configurations.Add(new HospitalConfiguration());
            modelBuilder.Configurations.Add(new HospitalFacultyMappingConfiguration());
            modelBuilder.Configurations.Add(new HospitalSuggestingConfiguration());
            modelBuilder.Configurations.Add(new ImportPaperConfiguration());
            modelBuilder.Configurations.Add(new ImportPaperDetailConfiguration());
            modelBuilder.Configurations.Add(new LabTestConfiguration());
            modelBuilder.Configurations.Add(new LabTestSampleMappingConfiguration());
            modelBuilder.Configurations.Add(new PatientConfiguration());
            modelBuilder.Configurations.Add(new ResultIndexConfiguration());
            modelBuilder.Configurations.Add(new ResultPaperConfiguration());
            modelBuilder.Configurations.Add(new SampleConfiguration());
            modelBuilder.Configurations.Add(new SupplyConfiguration());
            modelBuilder.Configurations.Add(new SupplyTypeConfiguration());
            modelBuilder.Configurations.Add(new TestingConfiguration());
            modelBuilder.Configurations.Add(new TestProfileConfiguration());
            modelBuilder.Configurations.Add(new TestProfileLabTestMappingConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccountConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new ExportPaperConfiguration(schema));
            modelBuilder.Configurations.Add(new ExportProposurePaperConfiguration(schema));
            modelBuilder.Configurations.Add(new ExportProposurePaperDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new FacultyConfiguration(schema));
            modelBuilder.Configurations.Add(new FeedbackConfiguration(schema));
            modelBuilder.Configurations.Add(new HospitalConfiguration(schema));
            modelBuilder.Configurations.Add(new HospitalFacultyMappingConfiguration(schema));
            modelBuilder.Configurations.Add(new HospitalSuggestingConfiguration(schema));
            modelBuilder.Configurations.Add(new ImportPaperConfiguration(schema));
            modelBuilder.Configurations.Add(new ImportPaperDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new LabTestConfiguration(schema));
            modelBuilder.Configurations.Add(new LabTestSampleMappingConfiguration(schema));
            modelBuilder.Configurations.Add(new PatientConfiguration(schema));
            modelBuilder.Configurations.Add(new ResultIndexConfiguration(schema));
            modelBuilder.Configurations.Add(new ResultPaperConfiguration(schema));
            modelBuilder.Configurations.Add(new SampleConfiguration(schema));
            modelBuilder.Configurations.Add(new SupplyConfiguration(schema));
            modelBuilder.Configurations.Add(new SupplyTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new TestingConfiguration(schema));
            modelBuilder.Configurations.Add(new TestProfileConfiguration(schema));
            modelBuilder.Configurations.Add(new TestProfileLabTestMappingConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class MyDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<Account> Accounts { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<ExportPaper> ExportPapers { get; set; }
        public System.Data.Entity.DbSet<ExportProposurePaper> ExportProposurePapers { get; set; }
        public System.Data.Entity.DbSet<ExportProposurePaperDetail> ExportProposurePaperDetails { get; set; }
        public System.Data.Entity.DbSet<Faculty> Faculties { get; set; }
        public System.Data.Entity.DbSet<Feedback> Feedbacks { get; set; }
        public System.Data.Entity.DbSet<Hospital> Hospitals { get; set; }
        public System.Data.Entity.DbSet<HospitalFacultyMapping> HospitalFacultyMappings { get; set; }
        public System.Data.Entity.DbSet<HospitalSuggesting> HospitalSuggestings { get; set; }
        public System.Data.Entity.DbSet<ImportPaper> ImportPapers { get; set; }
        public System.Data.Entity.DbSet<ImportPaperDetail> ImportPaperDetails { get; set; }
        public System.Data.Entity.DbSet<LabTest> LabTests { get; set; }
        public System.Data.Entity.DbSet<LabTestSampleMapping> LabTestSampleMappings { get; set; }
        public System.Data.Entity.DbSet<Patient> Patients { get; set; }
        public System.Data.Entity.DbSet<ResultIndex> ResultIndexes { get; set; }
        public System.Data.Entity.DbSet<ResultPaper> ResultPapers { get; set; }
        public System.Data.Entity.DbSet<Sample> Samples { get; set; }
        public System.Data.Entity.DbSet<Supply> Supplies { get; set; }
        public System.Data.Entity.DbSet<SupplyType> SupplyTypes { get; set; }
        public System.Data.Entity.DbSet<Testing> Testings { get; set; }
        public System.Data.Entity.DbSet<TestProfile> TestProfiles { get; set; }
        public System.Data.Entity.DbSet<TestProfileLabTestMapping> TestProfileLabTestMappings { get; set; }

        public FakeMyDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Accounts = new FakeDbSet<Account>("AccountId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            ExportPapers = new FakeDbSet<ExportPaper>("ExportPaperId");
            ExportProposurePapers = new FakeDbSet<ExportProposurePaper>("ExportProposurePaperId");
            ExportProposurePaperDetails = new FakeDbSet<ExportProposurePaperDetail>("ExportProposurePaperDetailId");
            Faculties = new FakeDbSet<Faculty>("FacultyId");
            Feedbacks = new FakeDbSet<Feedback>("FeedbackId");
            Hospitals = new FakeDbSet<Hospital>("HospitalId");
            HospitalFacultyMappings = new FakeDbSet<HospitalFacultyMapping>("HospitalFacultyMappingId");
            HospitalSuggestings = new FakeDbSet<HospitalSuggesting>("Id");
            ImportPapers = new FakeDbSet<ImportPaper>("ImportPaperId");
            ImportPaperDetails = new FakeDbSet<ImportPaperDetail>("ImportPaperDetailId");
            LabTests = new FakeDbSet<LabTest>("LabTestId");
            LabTestSampleMappings = new FakeDbSet<LabTestSampleMapping>("LabTestSampleMappingId");
            Patients = new FakeDbSet<Patient>("PatientId");
            ResultIndexes = new FakeDbSet<ResultIndex>("ResultIndexId");
            ResultPapers = new FakeDbSet<ResultPaper>("ResultPaperId");
            Samples = new FakeDbSet<Sample>("SampleId");
            Supplies = new FakeDbSet<Supply>("SuppliesId");
            SupplyTypes = new FakeDbSet<SupplyType>("SuppliesTypeId");
            Testings = new FakeDbSet<Testing>("TestingId");
            TestProfiles = new FakeDbSet<TestProfile>("TestProfileId");
            TestProfileLabTestMappings = new FakeDbSet<TestProfileLabTestMapping>("TestProfileLabTestMappingId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Account
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Account
    {
        public int AccountId { get; set; } // AccountID (Primary key)
        public string Role { get; set; } // Role (length: 20)
        public string Email { get; set; } // Email (length: 255)
        public string Password { get; set; } // Password (length: 128)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)
        public string AvatarUrl { get; set; } // AvatarURL (length: 500)

        // Reverse navigation

        /// <summary>
        /// Child Employees where [Employee].[AccountID] point to this entity (FK__Employee__Accoun__68487DD7)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Employee> Employees { get; set; } // Employee.FK__Employee__Accoun__68487DD7
        /// <summary>
        /// Child Patients where [Patient].[AccountID] point to this entity (FK_Patient_Account)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Patient> Patients { get; set; } // Patient.FK_Patient_Account

        public Account()
        {
            Employees = new System.Collections.Generic.List<Employee>();
            Patients = new System.Collections.Generic.List<Patient>();
        }
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Employee
    {
        public int EmployeeId { get; set; } // EmployeeID (Primary key)
        public int? AccountId { get; set; } // AccountID
        public string Status { get; set; } // Status (length: 20)
        public string FullName { get; set; } // FullName (length: 100)
        public string Gender { get; set; } // Gender (length: 10)
        public System.DateTime? DateOfBirth { get; set; } // DateOfBirth
        public string HomeAddress { get; set; } // HomeAddress (length: 200)
        public System.DateTime? StartDate { get; set; } // StartDate
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child Feedbacks where [Feedback].[EmployeeID] point to this entity (FK__Feedback__Employ__5BE2A6F2)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Feedback> Feedbacks { get; set; } // Feedback.FK__Feedback__Employ__5BE2A6F2
        /// <summary>
        /// Child ResultPapers where [ResultPaper].[DoctorID] point to this entity (FK_ResultPaper_Employee)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ResultPaper> ResultPapers { get; set; } // ResultPaper.FK_ResultPaper_Employee

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [Employee].([AccountId]) (FK__Employee__Accoun__68487DD7)
        /// </summary>
        public virtual Account Account { get; set; } // FK__Employee__Accoun__68487DD7

        public Employee()
        {
            Feedbacks = new System.Collections.Generic.List<Feedback>();
            ResultPapers = new System.Collections.Generic.List<ResultPaper>();
        }
    }

    // ExportPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ExportPaper
    {
        public int ExportPaperId { get; set; } // ExportPaperId (Primary key)
        public string ExportPaperCode { get; set; } // ExportPaperCode (length: 20)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public int? AccountId { get; set; } // AccountId
        public int? ExportProposurePaperId { get; set; } // ExportProposurePaperId
        public string Note { get; set; } // Note

        // Foreign keys

        /// <summary>
        /// Parent ExportProposurePaper pointed by [ExportPaper].([ExportProposurePaperId]) (FK_ExportPaper_ExportProposurePaper)
        /// </summary>
        public virtual ExportProposurePaper ExportProposurePaper { get; set; } // FK_ExportPaper_ExportProposurePaper
    }

    // ExportProposurePaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ExportProposurePaper
    {
        public int ExportProposurePaperId { get; set; } // ExportProposurePaperId (Primary key)
        public string ExportProposurePaperCode { get; set; } // ExportProposurePaperCode (length: 20)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public int? AccountId { get; set; } // AccountId
        public string Note { get; set; } // Note
        public string Status { get; set; } // Status (length: 10)

        // Reverse navigation

        /// <summary>
        /// Child ExportPapers where [ExportPaper].[ExportProposurePaperId] point to this entity (FK_ExportPaper_ExportProposurePaper)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ExportPaper> ExportPapers { get; set; } // ExportPaper.FK_ExportPaper_ExportProposurePaper
        /// <summary>
        /// Child ExportProposurePaperDetails where [ExportProposurePaperDetail].[ExportProposurePaperId] point to this entity (FK_ExportProposurePaperDetail_ExportProposurePaper)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ExportProposurePaperDetail> ExportProposurePaperDetails { get; set; } // ExportProposurePaperDetail.FK_ExportProposurePaperDetail_ExportProposurePaper

        public ExportProposurePaper()
        {
            ExportPapers = new System.Collections.Generic.List<ExportPaper>();
            ExportProposurePaperDetails = new System.Collections.Generic.List<ExportProposurePaperDetail>();
        }
    }

    // ExportProposurePaperDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ExportProposurePaperDetail
    {
        public int ExportProposurePaperDetailId { get; set; } // ExportProposurePaperDetailId (Primary key)
        public int? ExportProposurePaperId { get; set; } // ExportProposurePaperId
        public int? SuppliesId { get; set; } // SuppliesId
        public string Unit { get; set; } // Unit (length: 50)
        public int? Quantity { get; set; } // Quantity
        public string Note { get; set; } // Note

        // Foreign keys

        /// <summary>
        /// Parent ExportProposurePaper pointed by [ExportProposurePaperDetail].([ExportProposurePaperId]) (FK_ExportProposurePaperDetail_ExportProposurePaper)
        /// </summary>
        public virtual ExportProposurePaper ExportProposurePaper { get; set; } // FK_ExportProposurePaperDetail_ExportProposurePaper

        /// <summary>
        /// Parent Supply pointed by [ExportProposurePaperDetail].([SuppliesId]) (FK_ExportProposurePaperDetail_Supplies)
        /// </summary>
        public virtual Supply Supply { get; set; } // FK_ExportProposurePaperDetail_Supplies
    }

    // Faculty
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Faculty
    {
        public int FacultyId { get; set; } // FacultyID (Primary key)
        public string FacultyName { get; set; } // FacultyName (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child HospitalFacultyMappings where [HospitalFacultyMapping].[FacultyID] point to this entity (FK__HospitalF__Facul__5DCAEF64)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HospitalFacultyMapping> HospitalFacultyMappings { get; set; } // HospitalFacultyMapping.FK__HospitalF__Facul__5DCAEF64
        /// <summary>
        /// Child HospitalSuggestings where [HospitalSuggesting].[FacultyID] point to this entity (FK__HospitalS__Facul__5FB337D6)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HospitalSuggesting> HospitalSuggestings { get; set; } // HospitalSuggesting.FK__HospitalS__Facul__5FB337D6

        public Faculty()
        {
            HospitalFacultyMappings = new System.Collections.Generic.List<HospitalFacultyMapping>();
            HospitalSuggestings = new System.Collections.Generic.List<HospitalSuggesting>();
        }
    }

    // Feedback
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Feedback
    {
        public int FeedbackId { get; set; } // FeedbackID (Primary key)
        public int? PatientId { get; set; } // PatientID
        public int? EmployeeId { get; set; } // EmployeeID
        public string Content { get; set; } // Content (length: 500)
        public System.DateTime? ReceivedDateTime { get; set; } // ReceivedDateTime

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [Feedback].([EmployeeId]) (FK__Feedback__Employ__5BE2A6F2)
        /// </summary>
        public virtual Employee Employee { get; set; } // FK__Feedback__Employ__5BE2A6F2

        /// <summary>
        /// Parent Patient pointed by [Feedback].([PatientId]) (FK__Feedback__Patien__6B24EA82)
        /// </summary>
        public virtual Patient Patient { get; set; } // FK__Feedback__Patien__6B24EA82
    }

    // Hospital
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Hospital
    {
        public int HospitalId { get; set; } // HospitalID (Primary key)
        public string HospitalName { get; set; } // HospitalName (length: 50)
        public string HospitalAddress { get; set; } // HospitalAddress (length: 200)
        public string Hotline { get; set; } // Hotline (length: 20)

        // Reverse navigation

        /// <summary>
        /// Child HospitalFacultyMappings where [HospitalFacultyMapping].[HospitalID] point to this entity (FK__HospitalF__Hospi__5EBF139D)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HospitalFacultyMapping> HospitalFacultyMappings { get; set; } // HospitalFacultyMapping.FK__HospitalF__Hospi__5EBF139D
        /// <summary>
        /// Child HospitalSuggestings where [HospitalSuggesting].[HospitalID] point to this entity (FK__HospitalS__Hospi__60A75C0F)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HospitalSuggesting> HospitalSuggestings { get; set; } // HospitalSuggesting.FK__HospitalS__Hospi__60A75C0F

        public Hospital()
        {
            HospitalFacultyMappings = new System.Collections.Generic.List<HospitalFacultyMapping>();
            HospitalSuggestings = new System.Collections.Generic.List<HospitalSuggesting>();
        }
    }

    // HospitalFacultyMapping
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class HospitalFacultyMapping
    {
        public int HospitalFacultyMappingId { get; set; } // HospitalFacultyMappingID (Primary key)
        public int? HospitalId { get; set; } // HospitalID
        public int? FacultyId { get; set; } // FacultyID

        // Foreign keys

        /// <summary>
        /// Parent Faculty pointed by [HospitalFacultyMapping].([FacultyId]) (FK__HospitalF__Facul__5DCAEF64)
        /// </summary>
        public virtual Faculty Faculty { get; set; } // FK__HospitalF__Facul__5DCAEF64

        /// <summary>
        /// Parent Hospital pointed by [HospitalFacultyMapping].([HospitalId]) (FK__HospitalF__Hospi__5EBF139D)
        /// </summary>
        public virtual Hospital Hospital { get; set; } // FK__HospitalF__Hospi__5EBF139D
    }

    // HospitalSuggesting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class HospitalSuggesting
    {
        public int Id { get; set; } // ID (Primary key)
        public int? TestingId { get; set; } // TestingID
        public int? HospitalId { get; set; } // HospitalID
        public int? FacultyId { get; set; } // FacultyID

        // Foreign keys

        /// <summary>
        /// Parent Faculty pointed by [HospitalSuggesting].([FacultyId]) (FK__HospitalS__Facul__5FB337D6)
        /// </summary>
        public virtual Faculty Faculty { get; set; } // FK__HospitalS__Facul__5FB337D6

        /// <summary>
        /// Parent Hospital pointed by [HospitalSuggesting].([HospitalId]) (FK__HospitalS__Hospi__60A75C0F)
        /// </summary>
        public virtual Hospital Hospital { get; set; } // FK__HospitalS__Hospi__60A75C0F

        /// <summary>
        /// Parent Testing pointed by [HospitalSuggesting].([TestingId]) (FK_HospitalSuggesting_Testing)
        /// </summary>
        public virtual Testing Testing { get; set; } // FK_HospitalSuggesting_Testing
    }

    // ImportPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ImportPaper
    {
        public int ImportPaperId { get; set; } // ImportPaperId (Primary key)
        public string ImportPaperCode { get; set; } // ImportPaperCode (length: 20)
        public System.DateTime? CreateDate { get; set; } // CreateDate
        public int? AccountId { get; set; } // AccountId
        public string Note { get; set; } // Note

        // Reverse navigation

        /// <summary>
        /// Child ImportPaperDetails where [ImportPaperDetail].[ImportPaperId] point to this entity (FK_ImportPaperDetail_ImportPaper)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ImportPaperDetail> ImportPaperDetails { get; set; } // ImportPaperDetail.FK_ImportPaperDetail_ImportPaper

        public ImportPaper()
        {
            ImportPaperDetails = new System.Collections.Generic.List<ImportPaperDetail>();
        }
    }

    // ImportPaperDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ImportPaperDetail
    {
        public int ImportPaperDetailId { get; set; } // ImportPaperDetailId (Primary key)
        public int? ImportPaperId { get; set; } // ImportPaperId
        public int? SuppliesId { get; set; } // SuppliesId
        public string Unit { get; set; } // Unit (length: 50)
        public int? Quantity { get; set; } // Quantity
        public string Note { get; set; } // Note

        // Foreign keys

        /// <summary>
        /// Parent ImportPaper pointed by [ImportPaperDetail].([ImportPaperId]) (FK_ImportPaperDetail_ImportPaper)
        /// </summary>
        public virtual ImportPaper ImportPaper { get; set; } // FK_ImportPaperDetail_ImportPaper

        /// <summary>
        /// Parent Supply pointed by [ImportPaperDetail].([SuppliesId]) (FK_ImportPaperDetail_Supplies)
        /// </summary>
        public virtual Supply Supply { get; set; } // FK_ImportPaperDetail_Supplies
    }

    // LabTest
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class LabTest
    {
        public int LabTestId { get; set; } // LabTestID (Primary key)
        public string LabTestName { get; set; } // LabTestName (length: 100)
        public string Description { get; set; } // Description (length: 500)
        public int? Price { get; set; } // Price

        // Reverse navigation

        /// <summary>
        /// Child LabTestSampleMappings where [LabTestSampleMapping].[LabTestID] point to this entity (FK_LabTestSampleMapping_LabTest)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTestSampleMapping> LabTestSampleMappings { get; set; } // LabTestSampleMapping.FK_LabTestSampleMapping_LabTest
        /// <summary>
        /// Child Testings where [Testing].[LabTestID] point to this entity (FK_Testing_LabTest)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Testing> Testings { get; set; } // Testing.FK_Testing_LabTest
        /// <summary>
        /// Child TestProfileLabTestMappings where [TestProfileLabTestMapping].[LabTestID] point to this entity (FK__TestProfi__LabTe__6E01572D)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TestProfileLabTestMapping> TestProfileLabTestMappings { get; set; } // TestProfileLabTestMapping.FK__TestProfi__LabTe__6E01572D

        public LabTest()
        {
            LabTestSampleMappings = new System.Collections.Generic.List<LabTestSampleMapping>();
            Testings = new System.Collections.Generic.List<Testing>();
            TestProfileLabTestMappings = new System.Collections.Generic.List<TestProfileLabTestMapping>();
        }
    }

    // LabTestSampleMapping
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class LabTestSampleMapping
    {
        public int LabTestSampleMappingId { get; set; } // LabTestSampleMappingID (Primary key)
        public int? SampleId { get; set; } // SampleID
        public int? LabTestId { get; set; } // LabTestID

        // Foreign keys

        /// <summary>
        /// Parent LabTest pointed by [LabTestSampleMapping].([LabTestId]) (FK_LabTestSampleMapping_LabTest)
        /// </summary>
        public virtual LabTest LabTest { get; set; } // FK_LabTestSampleMapping_LabTest

        /// <summary>
        /// Parent Sample pointed by [LabTestSampleMapping].([SampleId]) (FK_LabTestSampleMapping_Sample)
        /// </summary>
        public virtual Sample Sample { get; set; } // FK_LabTestSampleMapping_Sample
    }

    // Patient
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Patient
    {
        public int PatientId { get; set; } // PatientID (Primary key)
        public string PatientCode { get; set; } // PatientCode (length: 20)
        public int? AccountId { get; set; } // AccountID
        public string FullName { get; set; } // FullName (length: 100)
        public string Gender { get; set; } // Gender (length: 10)
        public System.DateTime? DateOfBirth { get; set; } // DateOfBirth
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)
        public string HomeAddress { get; set; } // HomeAddress (length: 200)
        public string CompanyAddress { get; set; } // CompanyAddress (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child Feedbacks where [Feedback].[PatientID] point to this entity (FK__Feedback__Patien__6B24EA82)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Feedback> Feedbacks { get; set; } // Feedback.FK__Feedback__Patien__6B24EA82
        /// <summary>
        /// Child Testings where [Testing].[PatientID] point to this entity (FK_Testing_Patient)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Testing> Testings { get; set; } // Testing.FK_Testing_Patient

        // Foreign keys

        /// <summary>
        /// Parent Account pointed by [Patient].([AccountId]) (FK_Patient_Account)
        /// </summary>
        public virtual Account Account { get; set; } // FK_Patient_Account

        public Patient()
        {
            Feedbacks = new System.Collections.Generic.List<Feedback>();
            Testings = new System.Collections.Generic.List<Testing>();
        }
    }

    // ResultIndex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ResultIndex
    {
        public int ResultIndexId { get; set; } // ResultIndexID (Primary key)
        public int? TestingId { get; set; } // TestingID
        public string IndexName { get; set; } // IndexName (length: 20)
        public float? IndexValue { get; set; } // IndexValue
        public float? LowerBound { get; set; } // LowerBound
        public float? UpperBound { get; set; } // UpperBound

        // Foreign keys

        /// <summary>
        /// Parent Testing pointed by [ResultIndex].([TestingId]) (FK_ResultIndex_Testing)
        /// </summary>
        public virtual Testing Testing { get; set; } // FK_ResultIndex_Testing
    }

    // ResultPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ResultPaper
    {
        public int ResultPaperId { get; set; } // ResultPaperID (Primary key)
        public int? DoctorId { get; set; } // DoctorID
        public string DoctorComment { get; set; } // DoctorComment (length: 500)
        public System.DateTime? ResponseDate { get; set; } // ResponseDate

        // Reverse navigation

        /// <summary>
        /// Child Testings where [Testing].[ResultPaperID] point to this entity (FK_Testing_ResultPaper)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Testing> Testings { get; set; } // Testing.FK_Testing_ResultPaper

        // Foreign keys

        /// <summary>
        /// Parent Employee pointed by [ResultPaper].([DoctorId]) (FK_ResultPaper_Employee)
        /// </summary>
        public virtual Employee Employee { get; set; } // FK_ResultPaper_Employee

        public ResultPaper()
        {
            Testings = new System.Collections.Generic.List<Testing>();
        }
    }

    // Sample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Sample
    {
        public int SampleId { get; set; } // SampleID (Primary key)
        public string SampleName { get; set; } // SampleName (length: 20)
        public string Description { get; set; } // Description (length: 500)

        // Reverse navigation

        /// <summary>
        /// Child LabTestSampleMappings where [LabTestSampleMapping].[SampleID] point to this entity (FK_LabTestSampleMapping_Sample)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<LabTestSampleMapping> LabTestSampleMappings { get; set; } // LabTestSampleMapping.FK_LabTestSampleMapping_Sample

        public Sample()
        {
            LabTestSampleMappings = new System.Collections.Generic.List<LabTestSampleMapping>();
        }
    }

    // Supply
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Supply
    {
        public int SuppliesId { get; set; } // SuppliesId (Primary key)
        public string SuppliesCode { get; set; } // SuppliesCode (length: 50)
        public string SuppliesName { get; set; } // SuppliesName (length: 50)
        public int? SuppliesTypeId { get; set; } // SuppliesTypeId
        public int? Quantity { get; set; } // Quantity
        public string Note { get; set; } // Note

        // Reverse navigation

        /// <summary>
        /// Child ExportProposurePaperDetails where [ExportProposurePaperDetail].[SuppliesId] point to this entity (FK_ExportProposurePaperDetail_Supplies)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ExportProposurePaperDetail> ExportProposurePaperDetails { get; set; } // ExportProposurePaperDetail.FK_ExportProposurePaperDetail_Supplies
        /// <summary>
        /// Child ImportPaperDetails where [ImportPaperDetail].[SuppliesId] point to this entity (FK_ImportPaperDetail_Supplies)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ImportPaperDetail> ImportPaperDetails { get; set; } // ImportPaperDetail.FK_ImportPaperDetail_Supplies

        // Foreign keys

        /// <summary>
        /// Parent SupplyType pointed by [Supply].([SuppliesTypeId]) (FK_Supplies_SuppliesType)
        /// </summary>
        public virtual SupplyType SupplyType { get; set; } // FK_Supplies_SuppliesType

        public Supply()
        {
            ExportProposurePaperDetails = new System.Collections.Generic.List<ExportProposurePaperDetail>();
            ImportPaperDetails = new System.Collections.Generic.List<ImportPaperDetail>();
        }
    }

    // SupplyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class SupplyType
    {
        public int SuppliesTypeId { get; set; } // SuppliesTypeId (Primary key)
        public string SuppliesTypeName { get; set; } // SuppliesTypeName (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child Supplies where [Supply].[SuppliesTypeId] point to this entity (FK_Supplies_SuppliesType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Supply> Supplies { get; set; } // Supply.FK_Supplies_SuppliesType

        public SupplyType()
        {
            Supplies = new System.Collections.Generic.List<Supply>();
        }
    }

    // Testing
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Testing
    {
        public int TestingId { get; set; } // TestingID (Primary key)
        public int? LabTestId { get; set; } // LabTestID
        public int? PatientId { get; set; } // PatientID
        public int? ResultPaperId { get; set; } // ResultPaperID
        public int? TechnicianId { get; set; } // TechnicianID
        public System.DateTime? BookedDate { get; set; } // BookedDate
        public System.TimeSpan? BookedTime { get; set; } // BookedTime
        public string RespondingMethod { get; set; } // RespondingMethod (length: 50)

        // Reverse navigation

        /// <summary>
        /// Child HospitalSuggestings where [HospitalSuggesting].[TestingID] point to this entity (FK_HospitalSuggesting_Testing)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<HospitalSuggesting> HospitalSuggestings { get; set; } // HospitalSuggesting.FK_HospitalSuggesting_Testing
        /// <summary>
        /// Child ResultIndexes where [ResultIndex].[TestingID] point to this entity (FK_ResultIndex_Testing)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ResultIndex> ResultIndexes { get; set; } // ResultIndex.FK_ResultIndex_Testing

        // Foreign keys

        /// <summary>
        /// Parent LabTest pointed by [Testing].([LabTestId]) (FK_Testing_LabTest)
        /// </summary>
        public virtual LabTest LabTest { get; set; } // FK_Testing_LabTest

        /// <summary>
        /// Parent Patient pointed by [Testing].([PatientId]) (FK_Testing_Patient)
        /// </summary>
        public virtual Patient Patient { get; set; } // FK_Testing_Patient

        /// <summary>
        /// Parent ResultPaper pointed by [Testing].([ResultPaperId]) (FK_Testing_ResultPaper)
        /// </summary>
        public virtual ResultPaper ResultPaper { get; set; } // FK_Testing_ResultPaper

        public Testing()
        {
            HospitalSuggestings = new System.Collections.Generic.List<HospitalSuggesting>();
            ResultIndexes = new System.Collections.Generic.List<ResultIndex>();
        }
    }

    // TestProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class TestProfile
    {
        public int TestProfileId { get; set; } // TestProfileID (Primary key)
        public string TestProfileName { get; set; } // TestProfileName (length: 200)
        public int? ParentProfileId { get; set; } // ParentProfileID

        // Reverse navigation

        /// <summary>
        /// Child TestProfiles where [TestProfile].[ParentProfileID] point to this entity (FK__TestProfi__Paren__6D0D32F4)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TestProfile> TestProfiles { get; set; } // TestProfile.FK__TestProfi__Paren__6D0D32F4
        /// <summary>
        /// Child TestProfileLabTestMappings where [TestProfileLabTestMapping].[TestProfileID] point to this entity (FK__TestProfi__TestP__6EF57B66)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<TestProfileLabTestMapping> TestProfileLabTestMappings { get; set; } // TestProfileLabTestMapping.FK__TestProfi__TestP__6EF57B66

        // Foreign keys

        /// <summary>
        /// Parent TestProfile pointed by [TestProfile].([ParentProfileId]) (FK__TestProfi__Paren__6D0D32F4)
        /// </summary>
        public virtual TestProfile ParentProfile { get; set; } // FK__TestProfi__Paren__6D0D32F4

        public TestProfile()
        {
            TestProfiles = new System.Collections.Generic.List<TestProfile>();
            TestProfileLabTestMappings = new System.Collections.Generic.List<TestProfileLabTestMapping>();
        }
    }

    // TestProfileLabTestMapping
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class TestProfileLabTestMapping
    {
        public int TestProfileLabTestMappingId { get; set; } // TestProfileLabTestMappingID (Primary key)
        public int? TestProfileId { get; set; } // TestProfileID
        public int? LabTestId { get; set; } // LabTestID

        // Foreign keys

        /// <summary>
        /// Parent LabTest pointed by [TestProfileLabTestMapping].([LabTestId]) (FK__TestProfi__LabTe__6E01572D)
        /// </summary>
        public virtual LabTest LabTest { get; set; } // FK__TestProfi__LabTe__6E01572D

        /// <summary>
        /// Parent TestProfile pointed by [TestProfileLabTestMapping].([TestProfileId]) (FK__TestProfi__TestP__6EF57B66)
        /// </summary>
        public virtual TestProfile TestProfile { get; set; } // FK__TestProfi__TestP__6EF57B66
    }

    #endregion

    #region POCO Configuration

    // Account
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class AccountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Account>
    {
        public AccountConfiguration()
            : this("dbo")
        {
        }

        public AccountConfiguration(string schema)
        {
            ToTable("Account", schema);
            HasKey(x => x.AccountId);

            Property(x => x.AccountId).HasColumnName(@"AccountID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Role).HasColumnName(@"Role").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(20);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(255);
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(128);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(20);
            Property(x => x.AvatarUrl).HasColumnName(@"AvatarURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
        }
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Employee>
    {
        public EmployeeConfiguration()
            : this("dbo")
        {
        }

        public EmployeeConfiguration(string schema)
        {
            ToTable("Employee", schema);
            HasKey(x => x.EmployeeId);

            Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountId).HasColumnName(@"AccountID").HasColumnType("int").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(20);
            Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(10);
            Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("date").IsOptional();
            Property(x => x.HomeAddress).HasColumnName(@"HomeAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("date").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(20);

            // Foreign keys
            HasOptional(a => a.Account).WithMany(b => b.Employees).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK__Employee__Accoun__68487DD7
        }
    }

    // ExportPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ExportPaperConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExportPaper>
    {
        public ExportPaperConfiguration()
            : this("dbo")
        {
        }

        public ExportPaperConfiguration(string schema)
        {
            ToTable("ExportPaper", schema);
            HasKey(x => x.ExportPaperId);

            Property(x => x.ExportPaperId).HasColumnName(@"ExportPaperId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ExportPaperCode).HasColumnName(@"ExportPaperCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("date").IsOptional();
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsOptional();
            Property(x => x.ExportProposurePaperId).HasColumnName(@"ExportProposurePaperId").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.ExportProposurePaper).WithMany(b => b.ExportPapers).HasForeignKey(c => c.ExportProposurePaperId).WillCascadeOnDelete(false); // FK_ExportPaper_ExportProposurePaper
        }
    }

    // ExportProposurePaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ExportProposurePaperConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExportProposurePaper>
    {
        public ExportProposurePaperConfiguration()
            : this("dbo")
        {
        }

        public ExportProposurePaperConfiguration(string schema)
        {
            ToTable("ExportProposurePaper", schema);
            HasKey(x => x.ExportProposurePaperId);

            Property(x => x.ExportProposurePaperId).HasColumnName(@"ExportProposurePaperId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ExportProposurePaperCode).HasColumnName(@"ExportProposurePaperCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("date").IsOptional();
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(10);
        }
    }

    // ExportProposurePaperDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ExportProposurePaperDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExportProposurePaperDetail>
    {
        public ExportProposurePaperDetailConfiguration()
            : this("dbo")
        {
        }

        public ExportProposurePaperDetailConfiguration(string schema)
        {
            ToTable("ExportProposurePaperDetail", schema);
            HasKey(x => x.ExportProposurePaperDetailId);

            Property(x => x.ExportProposurePaperDetailId).HasColumnName(@"ExportProposurePaperDetailId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ExportProposurePaperId).HasColumnName(@"ExportProposurePaperId").HasColumnType("int").IsOptional();
            Property(x => x.SuppliesId).HasColumnName(@"SuppliesId").HasColumnType("int").IsOptional();
            Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.ExportProposurePaper).WithMany(b => b.ExportProposurePaperDetails).HasForeignKey(c => c.ExportProposurePaperId).WillCascadeOnDelete(false); // FK_ExportProposurePaperDetail_ExportProposurePaper
            HasOptional(a => a.Supply).WithMany(b => b.ExportProposurePaperDetails).HasForeignKey(c => c.SuppliesId).WillCascadeOnDelete(false); // FK_ExportProposurePaperDetail_Supplies
        }
    }

    // Faculty
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FacultyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Faculty>
    {
        public FacultyConfiguration()
            : this("dbo")
        {
        }

        public FacultyConfiguration(string schema)
        {
            ToTable("Faculty", schema);
            HasKey(x => x.FacultyId);

            Property(x => x.FacultyId).HasColumnName(@"FacultyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FacultyName).HasColumnName(@"FacultyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
        }
    }

    // Feedback
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FeedbackConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Feedback>
    {
        public FeedbackConfiguration()
            : this("dbo")
        {
        }

        public FeedbackConfiguration(string schema)
        {
            ToTable("Feedback", schema);
            HasKey(x => x.FeedbackId);

            Property(x => x.FeedbackId).HasColumnName(@"FeedbackID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PatientId).HasColumnName(@"PatientID").HasColumnType("int").IsOptional();
            Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("int").IsOptional();
            Property(x => x.Content).HasColumnName(@"Content").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.ReceivedDateTime).HasColumnName(@"ReceivedDateTime").HasColumnType("datetime").IsOptional();

            // Foreign keys
            HasOptional(a => a.Employee).WithMany(b => b.Feedbacks).HasForeignKey(c => c.EmployeeId).WillCascadeOnDelete(false); // FK__Feedback__Employ__5BE2A6F2
            HasOptional(a => a.Patient).WithMany(b => b.Feedbacks).HasForeignKey(c => c.PatientId).WillCascadeOnDelete(false); // FK__Feedback__Patien__6B24EA82
        }
    }

    // Hospital
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class HospitalConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Hospital>
    {
        public HospitalConfiguration()
            : this("dbo")
        {
        }

        public HospitalConfiguration(string schema)
        {
            ToTable("Hospital", schema);
            HasKey(x => x.HospitalId);

            Property(x => x.HospitalId).HasColumnName(@"HospitalID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HospitalName).HasColumnName(@"HospitalName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.HospitalAddress).HasColumnName(@"HospitalAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.Hotline).HasColumnName(@"Hotline").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(20);
        }
    }

    // HospitalFacultyMapping
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class HospitalFacultyMappingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HospitalFacultyMapping>
    {
        public HospitalFacultyMappingConfiguration()
            : this("dbo")
        {
        }

        public HospitalFacultyMappingConfiguration(string schema)
        {
            ToTable("HospitalFacultyMapping", schema);
            HasKey(x => x.HospitalFacultyMappingId);

            Property(x => x.HospitalFacultyMappingId).HasColumnName(@"HospitalFacultyMappingID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.HospitalId).HasColumnName(@"HospitalID").HasColumnType("int").IsOptional();
            Property(x => x.FacultyId).HasColumnName(@"FacultyID").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Faculty).WithMany(b => b.HospitalFacultyMappings).HasForeignKey(c => c.FacultyId).WillCascadeOnDelete(false); // FK__HospitalF__Facul__5DCAEF64
            HasOptional(a => a.Hospital).WithMany(b => b.HospitalFacultyMappings).HasForeignKey(c => c.HospitalId).WillCascadeOnDelete(false); // FK__HospitalF__Hospi__5EBF139D
        }
    }

    // HospitalSuggesting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class HospitalSuggestingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HospitalSuggesting>
    {
        public HospitalSuggestingConfiguration()
            : this("dbo")
        {
        }

        public HospitalSuggestingConfiguration(string schema)
        {
            ToTable("HospitalSuggesting", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TestingId).HasColumnName(@"TestingID").HasColumnType("int").IsOptional();
            Property(x => x.HospitalId).HasColumnName(@"HospitalID").HasColumnType("int").IsOptional();
            Property(x => x.FacultyId).HasColumnName(@"FacultyID").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Faculty).WithMany(b => b.HospitalSuggestings).HasForeignKey(c => c.FacultyId).WillCascadeOnDelete(false); // FK__HospitalS__Facul__5FB337D6
            HasOptional(a => a.Hospital).WithMany(b => b.HospitalSuggestings).HasForeignKey(c => c.HospitalId).WillCascadeOnDelete(false); // FK__HospitalS__Hospi__60A75C0F
            HasOptional(a => a.Testing).WithMany(b => b.HospitalSuggestings).HasForeignKey(c => c.TestingId).WillCascadeOnDelete(false); // FK_HospitalSuggesting_Testing
        }
    }

    // ImportPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ImportPaperConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ImportPaper>
    {
        public ImportPaperConfiguration()
            : this("dbo")
        {
        }

        public ImportPaperConfiguration(string schema)
        {
            ToTable("ImportPaper", schema);
            HasKey(x => x.ImportPaperId);

            Property(x => x.ImportPaperId).HasColumnName(@"ImportPaperId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImportPaperCode).HasColumnName(@"ImportPaperCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType("date").IsOptional();
            Property(x => x.AccountId).HasColumnName(@"AccountId").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // ImportPaperDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ImportPaperDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ImportPaperDetail>
    {
        public ImportPaperDetailConfiguration()
            : this("dbo")
        {
        }

        public ImportPaperDetailConfiguration(string schema)
        {
            ToTable("ImportPaperDetail", schema);
            HasKey(x => x.ImportPaperDetailId);

            Property(x => x.ImportPaperDetailId).HasColumnName(@"ImportPaperDetailId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ImportPaperId).HasColumnName(@"ImportPaperId").HasColumnType("int").IsOptional();
            Property(x => x.SuppliesId).HasColumnName(@"SuppliesId").HasColumnType("int").IsOptional();
            Property(x => x.Unit).HasColumnName(@"Unit").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.ImportPaper).WithMany(b => b.ImportPaperDetails).HasForeignKey(c => c.ImportPaperId).WillCascadeOnDelete(false); // FK_ImportPaperDetail_ImportPaper
            HasOptional(a => a.Supply).WithMany(b => b.ImportPaperDetails).HasForeignKey(c => c.SuppliesId).WillCascadeOnDelete(false); // FK_ImportPaperDetail_Supplies
        }
    }

    // LabTest
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class LabTestConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LabTest>
    {
        public LabTestConfiguration()
            : this("dbo")
        {
        }

        public LabTestConfiguration(string schema)
        {
            ToTable("LabTest", schema);
            HasKey(x => x.LabTestId);

            Property(x => x.LabTestId).HasColumnName(@"LabTestID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LabTestName).HasColumnName(@"LabTestName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.Price).HasColumnName(@"Price").HasColumnType("int").IsOptional();
        }
    }

    // LabTestSampleMapping
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class LabTestSampleMappingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LabTestSampleMapping>
    {
        public LabTestSampleMappingConfiguration()
            : this("dbo")
        {
        }

        public LabTestSampleMappingConfiguration(string schema)
        {
            ToTable("LabTestSampleMapping", schema);
            HasKey(x => x.LabTestSampleMappingId);

            Property(x => x.LabTestSampleMappingId).HasColumnName(@"LabTestSampleMappingID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SampleId).HasColumnName(@"SampleID").HasColumnType("int").IsOptional();
            Property(x => x.LabTestId).HasColumnName(@"LabTestID").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.LabTest).WithMany(b => b.LabTestSampleMappings).HasForeignKey(c => c.LabTestId).WillCascadeOnDelete(false); // FK_LabTestSampleMapping_LabTest
            HasOptional(a => a.Sample).WithMany(b => b.LabTestSampleMappings).HasForeignKey(c => c.SampleId).WillCascadeOnDelete(false); // FK_LabTestSampleMapping_Sample
        }
    }

    // Patient
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class PatientConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Patient>
    {
        public PatientConfiguration()
            : this("dbo")
        {
        }

        public PatientConfiguration(string schema)
        {
            ToTable("Patient", schema);
            HasKey(x => x.PatientId);

            Property(x => x.PatientId).HasColumnName(@"PatientID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PatientCode).HasColumnName(@"PatientCode").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(20);
            Property(x => x.AccountId).HasColumnName(@"AccountID").HasColumnType("int").IsOptional();
            Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(10);
            Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("datetime").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(20);
            Property(x => x.HomeAddress).HasColumnName(@"HomeAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.CompanyAddress).HasColumnName(@"CompanyAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);

            // Foreign keys
            HasOptional(a => a.Account).WithMany(b => b.Patients).HasForeignKey(c => c.AccountId).WillCascadeOnDelete(false); // FK_Patient_Account
        }
    }

    // ResultIndex
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ResultIndexConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResultIndex>
    {
        public ResultIndexConfiguration()
            : this("dbo")
        {
        }

        public ResultIndexConfiguration(string schema)
        {
            ToTable("ResultIndex", schema);
            HasKey(x => x.ResultIndexId);

            Property(x => x.ResultIndexId).HasColumnName(@"ResultIndexID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TestingId).HasColumnName(@"TestingID").HasColumnType("int").IsOptional();
            Property(x => x.IndexName).HasColumnName(@"IndexName").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(20);
            Property(x => x.IndexValue).HasColumnName(@"IndexValue").HasColumnType("real").IsOptional();
            Property(x => x.LowerBound).HasColumnName(@"LowerBound").HasColumnType("real").IsOptional();
            Property(x => x.UpperBound).HasColumnName(@"UpperBound").HasColumnType("real").IsOptional();

            // Foreign keys
            HasOptional(a => a.Testing).WithMany(b => b.ResultIndexes).HasForeignKey(c => c.TestingId).WillCascadeOnDelete(false); // FK_ResultIndex_Testing
        }
    }

    // ResultPaper
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ResultPaperConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ResultPaper>
    {
        public ResultPaperConfiguration()
            : this("dbo")
        {
        }

        public ResultPaperConfiguration(string schema)
        {
            ToTable("ResultPaper", schema);
            HasKey(x => x.ResultPaperId);

            Property(x => x.ResultPaperId).HasColumnName(@"ResultPaperID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DoctorId).HasColumnName(@"DoctorID").HasColumnType("int").IsOptional();
            Property(x => x.DoctorComment).HasColumnName(@"DoctorComment").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.ResponseDate).HasColumnName(@"ResponseDate").HasColumnType("date").IsOptional();

            // Foreign keys
            HasOptional(a => a.Employee).WithMany(b => b.ResultPapers).HasForeignKey(c => c.DoctorId).WillCascadeOnDelete(false); // FK_ResultPaper_Employee
        }
    }

    // Sample
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class SampleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sample>
    {
        public SampleConfiguration()
            : this("dbo")
        {
        }

        public SampleConfiguration(string schema)
        {
            ToTable("Sample", schema);
            HasKey(x => x.SampleId);

            Property(x => x.SampleId).HasColumnName(@"SampleID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SampleName).HasColumnName(@"SampleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
        }
    }

    // Supply
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class SupplyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Supply>
    {
        public SupplyConfiguration()
            : this("dbo")
        {
        }

        public SupplyConfiguration(string schema)
        {
            ToTable("Supply", schema);
            HasKey(x => x.SuppliesId);

            Property(x => x.SuppliesId).HasColumnName(@"SuppliesId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SuppliesCode).HasColumnName(@"SuppliesCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SuppliesName).HasColumnName(@"SuppliesName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.SuppliesTypeId).HasColumnName(@"SuppliesTypeId").HasColumnType("int").IsOptional();
            Property(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType("int").IsOptional();
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("nvarchar(max)").IsOptional();

            // Foreign keys
            HasOptional(a => a.SupplyType).WithMany(b => b.Supplies).HasForeignKey(c => c.SuppliesTypeId).WillCascadeOnDelete(false); // FK_Supplies_SuppliesType
        }
    }

    // SupplyType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class SupplyTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SupplyType>
    {
        public SupplyTypeConfiguration()
            : this("dbo")
        {
        }

        public SupplyTypeConfiguration(string schema)
        {
            ToTable("SupplyType", schema);
            HasKey(x => x.SuppliesTypeId);

            Property(x => x.SuppliesTypeId).HasColumnName(@"SuppliesTypeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SuppliesTypeName).HasColumnName(@"SuppliesTypeName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // Testing
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class TestingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Testing>
    {
        public TestingConfiguration()
            : this("dbo")
        {
        }

        public TestingConfiguration(string schema)
        {
            ToTable("Testing", schema);
            HasKey(x => x.TestingId);

            Property(x => x.TestingId).HasColumnName(@"TestingID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LabTestId).HasColumnName(@"LabTestID").HasColumnType("int").IsOptional();
            Property(x => x.PatientId).HasColumnName(@"PatientID").HasColumnType("int").IsOptional();
            Property(x => x.ResultPaperId).HasColumnName(@"ResultPaperID").HasColumnType("int").IsOptional();
            Property(x => x.TechnicianId).HasColumnName(@"TechnicianID").HasColumnType("int").IsOptional();
            Property(x => x.BookedDate).HasColumnName(@"BookedDate").HasColumnType("date").IsOptional();
            Property(x => x.BookedTime).HasColumnName(@"BookedTime").HasColumnType("time").IsOptional();
            Property(x => x.RespondingMethod).HasColumnName(@"RespondingMethod").HasColumnType("nchar").IsOptional().IsFixedLength().HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.LabTest).WithMany(b => b.Testings).HasForeignKey(c => c.LabTestId).WillCascadeOnDelete(false); // FK_Testing_LabTest
            HasOptional(a => a.Patient).WithMany(b => b.Testings).HasForeignKey(c => c.PatientId).WillCascadeOnDelete(false); // FK_Testing_Patient
            HasOptional(a => a.ResultPaper).WithMany(b => b.Testings).HasForeignKey(c => c.ResultPaperId).WillCascadeOnDelete(false); // FK_Testing_ResultPaper
        }
    }

    // TestProfile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class TestProfileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TestProfile>
    {
        public TestProfileConfiguration()
            : this("dbo")
        {
        }

        public TestProfileConfiguration(string schema)
        {
            ToTable("TestProfile", schema);
            HasKey(x => x.TestProfileId);

            Property(x => x.TestProfileId).HasColumnName(@"TestProfileID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TestProfileName).HasColumnName(@"TestProfileName").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.ParentProfileId).HasColumnName(@"ParentProfileID").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.ParentProfile).WithMany(b => b.TestProfiles).HasForeignKey(c => c.ParentProfileId).WillCascadeOnDelete(false); // FK__TestProfi__Paren__6D0D32F4
        }
    }

    // TestProfileLabTestMapping
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class TestProfileLabTestMappingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TestProfileLabTestMapping>
    {
        public TestProfileLabTestMappingConfiguration()
            : this("dbo")
        {
        }

        public TestProfileLabTestMappingConfiguration(string schema)
        {
            ToTable("TestProfileLabTestMapping", schema);
            HasKey(x => x.TestProfileLabTestMappingId);

            Property(x => x.TestProfileLabTestMappingId).HasColumnName(@"TestProfileLabTestMappingID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TestProfileId).HasColumnName(@"TestProfileID").HasColumnType("int").IsOptional();
            Property(x => x.LabTestId).HasColumnName(@"LabTestID").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.LabTest).WithMany(b => b.TestProfileLabTestMappings).HasForeignKey(c => c.LabTestId).WillCascadeOnDelete(false); // FK__TestProfi__LabTe__6E01572D
            HasOptional(a => a.TestProfile).WithMany(b => b.TestProfileLabTestMappings).HasForeignKey(c => c.TestProfileId).WillCascadeOnDelete(false); // FK__TestProfi__TestP__6EF57B66
        }
    }

    #endregion

}
// </auto-generated>

