<#@ import namespace="System.Collections.Generic" #>
<#
fileManager.StartHeader();
// Copyright (C) Simon Hughes 2012
// v2.36.1
// Reference: https://github.com/Hoangpnse62077/CasptoneProject
// Gmail: hoangpnse62077@fpt.edu.vn


#>
//Customized By: Hoangpn
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = <#= Settings.TargetFrameworkVersion #>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

<#if (Settings.ElementsToGenerate.HasFlag(Elements.Poco) || Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration))
{
    if (Settings.UseDataAnnotations) {#>
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
<#  }
}
#>

namespace <#= Settings.Namespace #>
{
  
<#
var usingsContext = new List<string>();
var usingsAll = new List<string>();

usingsAll.AddRange(Settings.AdditionalNamespaces.Where(x => !string.IsNullOrEmpty(x)));

if ((Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) ||
     Settings.ElementsToGenerate.HasFlag(Elements.Context) ||
     Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork)) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.Poco) && !string.IsNullOrWhiteSpace(Settings.PocoNamespace)))
    usingsAll.Add(Settings.PocoNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.Context) && !string.IsNullOrWhiteSpace(Settings.ContextNamespace)))
    usingsAll.Add(Settings.ContextNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.Context) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(Settings.UnitOfWorkNamespace)))
    usingsAll.Add(Settings.UnitOfWorkNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.Context) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) && !string.IsNullOrWhiteSpace(Settings.PocoConfigurationNamespace)))
        usingsAll.Add(Settings.PocoConfigurationNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.Context))
{
    if (Settings.AddUnitTestingDbContext || Settings.StoredProcs.Any())
    {
        usingsContext.Add("System.Linq");
    }
}
if (!Settings.GenerateSeparateFiles)
{
    usingsAll.AddRange(usingsContext);
}
foreach(var usingStatement in usingsAll.Distinct().OrderBy(x => x)) {
 #>
    using <#= usingStatement #>;
<# } #>

<# if (Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(Settings.DbContextInterfaceName))
{
    fileManager.StartNewFile(Settings.DbContextInterfaceName + Settings.FileExtension);
    if (!Settings.GenerateSeparateFiles)
    { } }
 if(!string.IsNullOrWhiteSpace(Settings.MigrationConfigurationFileName)) {
       fileManager.StartNewFile(Settings.MigrationConfigurationFileName + Settings.FileExtension);  #>
<# if(!Settings.GenerateSeparateFiles) { #>
    // ************************************************************************
    // Db Migration Configuration
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    internal sealed <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#=Settings.MigrationConfigurationFileName#> : System.Data.Entity.Migrations.DbMigrationsConfiguration<<#=Settings.DbContextName#>>
    {
        <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <#=Settings.MigrationConfigurationFileName#>()
        {
            Settings.AutomaticMigrationsEnabled = <# if (Settings.AutomaticMigrationsEnabled) { #>true<# } else { #>false<# } #>;
            Settings.AutomaticMigrationDataLossAllowed = <# if (Settings.AutomaticMigrationDataLossAllowed) { #>true<# } else { #>false<# } #>;
<# if (!string.IsNullOrEmpty(Settings.ContextKey)) { #>
            Settings.ContextKey = "<#= Settings.ContextKey #>";
<# } #>
      

<# }
   

 if(Settings.ElementsToGenerate.HasFlag(Elements.Poco)){
 if(!Settings.GenerateSeparateFiles) { #>
    #region POCO classes
     public interface IDbModel 
     {
		string CreatedBy { get; set; } // CreatedBy (length: 50)
		System.DateTime CreatedDate { get; set; } // CreatedDate
		string UpdatedBy { get; set; } // UpdatedBy (length: 50)
		System.DateTime UpdatedDate { get; set; } // UpdatedDate
	 } 



<# } #>
<#
foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping).OrderByDescending(x => x.NameHumanCase) select t)
{
#>
<# fileManager.StartNewFile(tbl.NameHumanCaseWithSuffix() + Settings.FileExtension);
if(!tbl.HasPrimaryKey) { #>
   
<# } #>
<#if(Settings.IncludeComments != CommentsStyle.None){
#>    // <#=tbl.Name#>
<# } #>
<# WritePocoClassExtendedComments(tbl);
    WritePocoClassAttributes(tbl);#>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#=tbl.Name#><#=WritePocoBaseClasses != null ? WritePocoBaseClasses(tbl) : "" #>
    {
<# WritePocoBaseClassBody(tbl); #>
<# foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(x => !x.Hidden))
{
				
#>
<#= WritePocoColumn(col) #>
<# } #>
<#
if(tbl.ReverseNavigationProperty.Count() > 0)
{
#>

<#if(Settings.IncludeComments != CommentsStyle.None){#>        // Reverse navigation

<# } #>
<#
foreach(var s in tbl.ReverseNavigationProperty.OrderBy(x => x.Definition))
{ #>
<# if(Settings.IncludeComments != CommentsStyle.None){#>        /// <summary>
        /// <#=s.Comments ?? "" #>
        /// </summary>
<# }
   foreach (var rnpda in Settings.AdditionalReverseNavigationsDataAnnotations) {#>
        [<#=rnpda #>]
<# }
   if (s.AdditionalDataAnnotations != null) {
     foreach (var fkda in s.AdditionalDataAnnotations) {#>
        [<#=fkda #>]
<#   }
   } #>
        <#=s.Definition #>
<# } } #>
<# if(tbl.HasForeignKey) { #>

<#if(Settings.IncludeComments != CommentsStyle.None && tbl.Columns.SelectMany(x => x.EntityFk).Any()){#>        // Foreign keys
<# } #>
<#
foreach(var entityFk in tbl.Columns.SelectMany(x => x.EntityFk).OrderBy(o => o.Definition))
{ #>

<# if(Settings.IncludeComments != CommentsStyle.None){#>        /// <summary>
        /// <#=entityFk.Comments #>
        /// </summary>
<# }
   foreach (var fkda in Settings.AdditionalForeignKeysDataAnnotations) {#>
        [<#=fkda #>]
<# }
   if (entityFk.AdditionalDataAnnotations != null) {
     foreach (var fkda in entityFk.AdditionalDataAnnotations) {#>
        [<#=fkda #>]
<#   }
   } #>
        <#=entityFk.Definition #>
<# } } #>
<#
if (!Settings.UsePropertyInitializers){
if(tbl.Columns.Where(c => c.Default != string.Empty && !c.Hidden).Count() > 0 || tbl.ReverseNavigationCtor.Count() > 0 || Settings.MakeClassesPartial)
{
#>

        public <#=tbl.Name#>()
        {
<#
foreach(var col in tbl.Columns.OrderBy(x => x.Ordinal).Where(c => c.Default != string.Empty && !c.Hidden))
{
#>
            <#=col.NameHumanCase #> = <#=col.Default #>;
<# } #>
<#
foreach(string s in tbl.ReverseNavigationCtor)
{
#>
            <#=s #>
<# }
if(Settings.MakeClassesPartial) {#>
            InitializePartial();
<#}#>        }
<#if(Settings.MakeClassesPartial) {#>

        partial void InitializePartial();
<#} }
}#>
    }

<# } }
if(Settings.ElementsToGenerate.HasFlag(Elements.Poco) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# }
if(Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration)){
if(!Settings.GenerateSeparateFiles) { #>
    #region POCO Configuration

<# } #>
<#
foreach(var tbl in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase))
{
#>
<# fileManager.StartNewFile(tbl.NameHumanCaseWithSuffix() + Settings.ConfigurationClassName + Settings.FileExtension);
if(Settings.IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCaseWithSuffix() + Settings.ConfigurationClassName#> : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<<#=tbl.Name#>>
    {
        public <#=tbl.NameHumanCaseWithSuffix() + Settings.ConfigurationClassName#>()
            : this(<# if (string.IsNullOrEmpty(tbl.Schema)) { #>""<# } else { #>"<#=tbl.Schema#>"<# } #>)
        {
        }

        public <#=tbl.NameHumanCaseWithSuffix() + Settings.ConfigurationClassName#>(string schema)
        {
<#if(!Settings.UseDataAnnotations){ if (!string.IsNullOrEmpty(tbl.Schema)) { #>
            ToTable("<#=tbl.Name#>", schema);
<# } else { #>
            ToTable("<#=tbl.Name#>");
<# }}
if(!Settings.UseDataAnnotations){#>
            HasKey(<#=tbl.PrimaryKeyNameHumanCase()#>);

<# } #>
<#
foreach(var col in tbl.Columns.Where(x => !x.Hidden && !string.IsNullOrEmpty(x.Config)).OrderBy(x => x.Ordinal))
{
#>
            <#=col.Config #>
<# } #>
<# if(tbl.HasForeignKey) { #>

<#if(Settings.IncludeComments != CommentsStyle.None && tbl.Columns.SelectMany(x => x.ConfigFk).Any()){#>            // Foreign keys
<# } #>
<#
foreach(var configFk in tbl.Columns.SelectMany(x => x.ConfigFk).OrderBy(o => o))
{
#>
            <#=configFk #>
<# } } #>
<#
foreach (string s in tbl.MappingConfiguration)
{
#>
            <#=s#>
<# } #>
<#if(Settings.MakeClassesPartial) {#>
            InitializePartial();
<#}#>        }
<#if(Settings.MakeClassesPartial) {#>
        partial void InitializePartial();
<#}#>    }

<# } }
if(Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# }
if(Settings.StoredProcs.Any() && Settings.ElementsToGenerate.HasFlag(Elements.Poco)){
if(!Settings.GenerateSeparateFiles) { #>
    #region Stored procedure return models

<# } #>
<#
foreach(var sp in Settings.StoredProcs.Where(x => x.ReturnModels.Count > 0 && x.ReturnModels.Any(returnColumns => returnColumns.Any()) && !Settings.StoredProcedureReturnTypes.ContainsKey(x.NameHumanCase) && !Settings.StoredProcedureReturnTypes.ContainsKey(x.Name)).OrderBy(x => x.NameHumanCase))
{
    string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
<# fileManager.StartNewFile(spReturnClassName + Settings.FileExtension);#>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    public <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#= spReturnClassName #>
    {
<#
var returnModelCount = sp.ReturnModels.Count;
if(returnModelCount < 2)
{
    foreach (var returnColumn in sp.ReturnModels.First())
    { #>
        <#= WriteStoredProcReturnColumn(returnColumn) #>
<#  }
} else {
    int model = 0;
    foreach (var returnModel in sp.ReturnModels)
    {
        model++;#>
        public class ResultSetModel<#= model #>
        {
<#      foreach (var returnColumn in returnModel)
        { #>
            <#= WriteStoredProcReturnColumn(returnColumn) #>
<#      }#>
        }
        public System.Collections.Generic.List<ResultSetModel<#= model #>> ResultSet<#= model #>;

<#  } #>
<# } #>
    }

<# }
if(Settings.StoredProcs.Any() && Settings.ElementsToGenerate.HasFlag(Elements.Poco) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# } } #>
<# fileManager.StartFooter(); #>
}
// </auto-generated>
<# fileManager.EndBlock();
if(Settings.GenerateSeparateFiles)
    fileManager.Process(); #>
